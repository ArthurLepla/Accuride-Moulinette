import { getAuthConfig } from './auth';
import { FlexibleProcessedData, HierarchyNode } from '@/types/sankey';

interface CreateAssetParams {
  name: string;
  parentId: string;
  type: string;
  description?: string;
  metadata?: Record<string, string>;
}

interface Aggregation {
  id: string;
  type: string;
  cycle: {
    base: string;
    factor: number;
  };
}

interface Variable {
  id: string;
  name: string;
  aggregations?: {
    [key: string]: Aggregation;
  };
}

// Nouvelle interface pour le cache des connexions
interface ConnectionCache {
  connections: any[];
  connectionMap: Map<string, any>;
  tagMap: Map<string, Map<string, any>>;
  loaded: boolean;
}

// Cache global pour les connexions et tags
const connectionCache: ConnectionCache = {
  connections: [],
  connectionMap: new Map(),
  tagMap: new Map(),
  loaded: false
};

// Cache pour les assets d√©j√† v√©rifi√©s
const assetExistenceCache = new Map<string, any>();

// Cache pour les variables d√©j√† v√©rifi√©es
const variableExistenceCache = new Map<string, any>();

// Statistiques d'importation pour le suivi global
const importStats = {
  totalAssets: 0,
  successfulVariables: 0,
  failedVariables: 0,
  retriedVariables: 0,
  pendingAggregations: 0,
  errors: new Map<string, number>() // Type d'erreur -> nombre d'occurrences
};

// Contr√¥le de d√©bit pour les requ√™tes API
const requestQueue = new Map<string, Promise<any>>();
let activeRequests = 0;
const MAX_CONCURRENT_REQUESTS = 3; // Limite de requ√™tes simultan√©es

async function executeWithRateLimit(key: string, operation: () => Promise<any>): Promise<any> {
  // Si op√©ration d√©j√† en cours avec cette cl√©, attendre le r√©sultat
  if (requestQueue.has(key)) {
    return requestQueue.get(key);
  }
  
  // Attendre si trop de requ√™tes actives
  while (activeRequests >= MAX_CONCURRENT_REQUESTS) {
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  // Ex√©cuter l'op√©ration
  activeRequests++;
  
  const operationPromise = operation()
    .catch(error => {
      // Si erreur de verrouillage de base, retenter avec backoff exponentiel
      if (typeof error === 'string' && error.includes("database is locked") || 
          error?.toString?.().includes("database is locked")) {
        console.log(`‚è±Ô∏è Base de donn√©es verrouill√©e, nouvelle tentative dans 500ms pour ${key}`);
        return new Promise(resolve => setTimeout(resolve, 500))
          .then(() => executeWithRateLimit(key, operation));
      }
      throw error;
    })
    .finally(() => {
      // Lib√©rer les ressources
      activeRequests--;
      requestQueue.delete(key);
    });
  
  // M√©moriser l'op√©ration en cours
  requestQueue.set(key, operationPromise);
  
  return operationPromise;
}

// Fonction pour nettoyer les noms d'assets
function sanitizeAssetName(name: string | undefined): string {
  if (!name) {
    throw new Error('Le nom de l\'asset ne peut pas √™tre vide ou undefined');
  }
  
  return name
    .trim()
    .replace(/[']/g, '')
    .replace(/[^a-zA-Z0-9\u00C0-\u017F\s_-]/g, '')
    .replace(/\s+/g, '_')
    .trim();
}

// D√©claration pr√©alable de toutes les fonctions
function logDebug(message: string, data?: any): void {
  // On peut activer/d√©sactiver les logs de debug en modifiant cette condition
  const DEBUG = false;
  if (DEBUG) {
    if (data) {
      console.log(`[DEBUG] ${message}`, data);
    } else {
      console.log(`[DEBUG] ${message}`);
    }
  }
}

// Am√©liorer la fonction de recherche de connexion pour les assets
function findConnectionForAsset(asset: any): any {
  let connection = null;
  
  // Garder trace de toutes les connexions potentielles pour faciliter le d√©bogage
  const potentialMatches: any[] = [];
  
  // 1. Rechercher avec le nom exact de l'asset
  connection = connectionCache.connectionMap.get(asset.name);
  if (connection) {
    console.log(`‚úÖ Connexion exacte trouv√©e: ${connection.connectionName} pour l'asset: ${asset.name}`);
    return connection;
  }
  
  // 2. Si pas trouv√©, essayer des strat√©gies plus souples
  
  // Essayer de trouver une connexion dont le nom est contenu dans le nom de l'asset
  Array.from(connectionCache.connectionMap.entries()).forEach(([connName, conn]) => {
    if (asset.name.includes(connName)) {
      potentialMatches.push({ name: connName, connection: conn, type: 'inclusion' });
    }
  });
  
  // Essayer l'inverse: un asset dont le nom est contenu dans la connexion
  Array.from(connectionCache.connectionMap.entries()).forEach(([connName, conn]) => {
    if (connName.includes(asset.name)) {
      potentialMatches.push({ name: connName, connection: conn, type: 'inclusion inverse' });
    }
  });
  
  // S√©lectionner la meilleure correspondance si plusieurs trouv√©es
  if (potentialMatches.length > 0) {
    // Trier par longueur pour favoriser les correspondances les plus longues
    potentialMatches.sort((a, b) => b.name.length - a.name.length);
    
    // Utiliser la premi√®re (meilleure) correspondance
    connection = potentialMatches[0].connection;
    console.log(`üìç Connexion trouv√©e par ${potentialMatches[0].type}: ${potentialMatches[0].name} pour l'asset: ${asset.name}`);
    
    // Log des autres correspondances potentielles
    if (potentialMatches.length > 1) {
      console.log(`‚ÑπÔ∏è Autres correspondances possibles pour ${asset.name}: ${potentialMatches.slice(1).map(m => m.name).join(', ')}`);
    }
  }
  
  // Fallback: Si aucune connexion n'est trouv√©e mais qu'il existe au moins une connexion, utiliser la premi√®re
  if (!connection && connectionCache.connections.length > 0) {
    // S√©lectionner une connexion par d√©faut (premi√®re disponible)
    connection = connectionCache.connections[0];
    console.log(`‚ö†Ô∏è Aucune connexion sp√©cifique trouv√©e pour l'asset: ${asset.name}. Utilisation de la connexion par d√©faut: ${connection.connectionName}`);
  }
  
  return connection;
}

// Nouvelle fonction pour pr√©-charger toutes les connexions et tags
async function preloadConnectionsAndTags() {
  // Si d√©j√† charg√©, retourner
  if (connectionCache.loaded) {
    return;
  }

  console.log('üîÑ Pr√©-chargement des connexions et tags...');
  
  try {
    const authConfig = getAuthConfig();
    if (!authConfig) {
      throw new Error('Non authentifi√©');
    }

    const response = await fetch(`/api/adapters/79894682fe424b409d954bd6cf0fda6b/connections`, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-Auth-Config': JSON.stringify(authConfig)
      }
    });
    
    if (!response.ok) {
      throw new Error(`Erreur lors de la r√©cup√©ration des connexions: ${await response.text()}`);
    }

    const data = await response.json();
    connectionCache.connections = data.connections || [];
    
    // Organiser les connexions et tags dans des maps pour acc√®s rapide
    for (const connection of connectionCache.connections) {
      connectionCache.connectionMap.set(connection.connectionName, connection);
      
      // Cr√©er une map pour les tags de cette connexion
      const tagMapForConnection = new Map();
      for (const tag of connection.tags) {
        tagMapForConnection.set(tag.name, tag);
      }
      connectionCache.tagMap.set(connection.connectionName, tagMapForConnection);
    }
    
    connectionCache.loaded = true;
    console.log(`‚úÖ ${connectionCache.connections.length} connexions charg√©es avec leurs tags`);
  } catch (error) {
    console.error('‚ùå Erreur lors du pr√©-chargement des connexions:', error instanceof Error ? error.message : error);
    throw error;
  }
}

// R√©soudre les erreurs de r√©f√©rence non trouv√©es en d√©clarant correctement les fonctions
async function getExistingAsset(name: string, parentId: string) {
  // V√©rifier si on a d√©j√† cherch√© cet asset
  const cacheKey = `${parentId}:${name}`;
  if (assetExistenceCache.has(cacheKey)) {
    return assetExistenceCache.get(cacheKey);
  }

  try {
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

    const response = await fetch(`/api/assets/${parentId}?includeChildren=true`, {
    headers: {
      'X-Auth-Config': JSON.stringify(authConfig)
      }
  });

  if (!response.ok) {
      console.warn(`‚ö†Ô∏è Erreur recherche assets sous ${parentId}`);
      assetExistenceCache.set(cacheKey, null);
      return null;
    }

    const data = await response.json();
    if (!data.children) {
      assetExistenceCache.set(cacheKey, null);
      return null;
    }

    const sanitizedName = sanitizeAssetName(name);
    const existingAsset = data.children.find((child: any) => 
      sanitizeAssetName(child.name) === sanitizedName
    );
    
    // Mettre en cache le r√©sultat (m√™me si null)
    assetExistenceCache.set(cacheKey, existingAsset || null);
    return existingAsset || null;
  } catch (error) {
    console.error('‚ùå Erreur recherche asset:', error instanceof Error ? error.message : error);
    assetExistenceCache.set(cacheKey, null);
    return null;
  }
}

// Syst√®me de gestion des tentatives pour les variables √©chou√©es
const failedVariableAttempts = new Map<string, { retryCount: number, nextRetry: number, error: any }>();

// Am√©liorer la fonction getExistingVariable pour g√©rer correctement les r√©ponses invalides
async function getExistingVariable(assetId: string, variableName: string) {
  // V√©rifier si on a d√©j√† cherch√© cette variable
  const cacheKey = `${assetId}:${variableName.toLowerCase()}`;
  if (variableExistenceCache.has(cacheKey)) {
    return variableExistenceCache.get(cacheKey);
  }

  try {
    const authConfig = getAuthConfig();
    if (!authConfig) {
      throw new Error('Non authentifi√©');
    }

    const response = await executeWithRateLimit(
      `getVariable:${cacheKey}`, 
      () => fetch(`/api/variables/${assetId}`, {
        headers: {
          'X-Auth-Config': JSON.stringify(authConfig)
        }
      })
    );

    if (!response.ok) {
      console.warn(`‚ö†Ô∏è API a retourn√© ${response.status} pour la recherche de variables sur l'asset ${assetId}`);
      variableExistenceCache.set(cacheKey, null);
      return null;
    }

    const variables = await response.json();
    
    // Validation explicite de la structure de la r√©ponse
    if (!Array.isArray(variables)) {
      console.error(`‚ö†Ô∏è R√©ponse API invalide pour les variables de l'asset ${assetId}. Attendu: Array, Re√ßu:`, 
        typeof variables, variables);
      variableExistenceCache.set(cacheKey, null);
      return null;
    }
    
    const existingVariable = variables.find((variable: any) => 
      variable.variableName.toLowerCase() === variableName.toLowerCase()
    );
    
    // Mettre en cache le r√©sultat (m√™me si null)
    variableExistenceCache.set(cacheKey, existingVariable || null);
    return existingVariable || null;
  } catch (error) {
    console.error(`‚ùå Erreur recherche variable ${variableName} pour asset ${assetId}:`, 
      error instanceof Error ? error.message : error);
    
    // Mise en cache conditionnelle en cas d'erreur
    variableExistenceCache.set(cacheKey, null);
    
    // Mise √† jour des statistiques d'erreur
    const errorType = error instanceof Error ? error.name : 'UnknownError';
    importStats.errors.set(errorType, (importStats.errors.get(errorType) || 0) + 1);
    
    return null;
  }
}

async function createOrGetAsset(params: CreateAssetParams) {
  const sanitizedName = sanitizeAssetName(params.name);
  
  const existingAsset = await getExistingAsset(sanitizedName, params.parentId);
  if (existingAsset) {
    return existingAsset;
  }

  console.log(`üìç Cr√©ation asset: ${sanitizedName}`);
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

  const response = await fetch('/api/assets', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Auth-Config': JSON.stringify(authConfig)
    },
    body: JSON.stringify({
      ...params,
      name: sanitizedName
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erreur cr√©ation asset: ${errorText}`);
  }

  const newAsset = await response.json();
  return newAsset;
}

async function createAggregation(variableId: string, aggregationType: string, base: string, factor: number) {
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

  const response = await fetch('/api/aggregations', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Auth-Config': JSON.stringify(authConfig)
    },
    body: JSON.stringify({
      aggregation: aggregationType,
      sourceId: variableId,
      cycle: {
        base,
        factor
      },
      provideAsVariable: true
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Erreur lors de la cr√©ation de l'agr√©gation pour la variable ${variableId}: ${errorText}`);
  }

  return await response.json();
}

// Optimisation du processus de cr√©ation d'agr√©gations en lots
// Cr√©er un syst√®me de file d'attente pour les agr√©gations
interface AggregationRequest {
  variableId: string;
  variableName: string;
  aggregationType: string;
  base: string;
  factor: number;
}

// File d'attente pour les agr√©gations
const aggregationQueue: AggregationRequest[] = [];
const BATCH_SIZE = 10; // Nombre d'agr√©gations √† traiter en une fois

// Fonction pour traiter la file d'attente des agr√©gations
async function processAggregationQueue() {
  if (aggregationQueue.length === 0) {
    return;
  }

  console.log(`üîÑ Traitement par lot de ${Math.min(BATCH_SIZE, aggregationQueue.length)} agr√©gations...`);
  
  // Prendre les N premi√®res demandes de la file
  const batch = aggregationQueue.splice(0, BATCH_SIZE);
  
  // Traiter les demandes en parall√®le
  await Promise.all(batch.map(async (request) => {
    try {
      await createAggregation(
        request.variableId,
        request.aggregationType,
        request.base,
        request.factor
      );
    } catch (error) {
      console.error(`‚ùå Erreur cr√©ation agr√©gation pour ${request.variableName}:`, error instanceof Error ? error.message : error);
    }
  }));
  
  // Traiter le reste de la file si n√©cessaire
  if (aggregationQueue.length > 0) {
    await processAggregationQueue();
  }
}

// Fonction optimis√©e pour ajouter des agr√©gations √† la file d'attente
async function createAggregationsOptimized(variableId: string, variableName: string) {
  const timeIntervals = [
    { 
      name: '5min',
      base: 'minute',
      factor: 5,
      type: 'Sum'
    },
    { 
      name: '1h',
      base: 'hour',
      factor: 1,
      type: 'Sum'
    },
    { 
      name: '4h',
      base: 'hour',
      factor: 4,
      type: 'Sum'
    },
    { 
      name: '8h',
      base: 'hour',
      factor: 8,
      type: 'Sum'
    },
    { 
      name: '1d',
      base: 'day',
      factor: 1,
      type: 'Sum'
    }
  ];

  // Ajouter les demandes d'agr√©gation √† la file d'attente
  for (const interval of timeIntervals) {
    aggregationQueue.push({
      variableId,
      variableName,
      aggregationType: interval.type,
      base: interval.base,
      factor: interval.factor
    });
  }
  
  // Si la file d'attente atteint une certaine taille, la traiter imm√©diatement
  if (aggregationQueue.length >= BATCH_SIZE) {
    await processAggregationQueue();
  }
  
  // Retourner un objet simul√© avec les agr√©gations pr√©vues
  // (les vraies agr√©gations seront cr√©√©es de mani√®re asynchrone)
  const simulatedAggregations: { [key: string]: any } = {};
  for (const interval of timeIntervals) {
    simulatedAggregations[interval.name] = {
      id: `pending_${variableId}_${interval.name}`,
      type: interval.type,
      cycle: {
        base: interval.base,
        factor: interval.factor
      }
    };
  }

  return simulatedAggregations;
}

// Modifier la fonction createAggregations pour utiliser la version optimis√©e
async function createAggregations(variableId: string, variableName: string) {
  // Utiliser la version optimis√©e avec file d'attente
  return createAggregationsOptimized(variableId, variableName);
}

// Fonction pour r√©cup√©rer les d√©tails d'un asset
async function getAssetDetails(assetId: string) {
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

  const response = await fetch(`/api/assets/${assetId}`, {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Auth-Config': JSON.stringify(authConfig)
    }
  });

  if (!response.ok) {
    throw new Error(`Erreur lors de la r√©cup√©ration des d√©tails de l'asset: ${await response.text()}`);
  }

  return await response.json();
}

// Am√©liorer la fonction createOrGetTagVariable pour g√©rer les diff√©rents types d'IPE
async function createOrGetTagVariable(assetId: string, name: string, tagName: string, dataType: string = 'FLOAT32', unit: string | null = null, description?: string, createAggs: boolean = false) {
  const cacheKey = `${assetId}:${name.toLowerCase()}`;
  
  try {
    // V√©rifier si la variable existe d√©j√† (utilise d√©j√† le cache via getExistingVariable)
    const existingVariable = await getExistingVariable(assetId, name);
    if (existingVariable) {
      logDebug(`Variable existante trouv√©e: ${name}`);
      return {
        ...existingVariable,
        aggregations: createAggs ? await createAggregations(existingVariable.variableId, name) : undefined
      };
    }

    // S'assurer que les connexions sont pr√©charg√©es
    if (!connectionCache.loaded) {
      await preloadConnectionsAndTags();
    }

    // R√©cup√©rer les informations de l'asset pour le nom de la connection
    const asset = await executeWithRateLimit(
      `getAssetDetails:${assetId}`,
      () => getAssetDetails(assetId)
    );
    
    logDebug('Asset trouv√© pour la variable', asset);

    const authConfig = getAuthConfig();
    if (!authConfig) {
      throw new Error('Non authentifi√©');
    }

    // Utiliser la fonction helper pour trouver la connexion
    const connection = findConnectionForAsset(asset);
    
    if (!connection) {
      console.error(`‚ö†Ô∏è Connexion non trouv√©e pour l'asset: ${asset.name}. Connexions disponibles:`, 
        Array.from(connectionCache.connectionMap.keys()).join(', '));
      
      // Lorsqu'aucune connexion n'est trouv√©e, v√©rifier si nous avons au moins une connexion disponible
      if (connectionCache.connections.length > 0) {
        console.log(`üîÑ Utilisation de la premi√®re connexion disponible: ${connectionCache.connections[0].connectionName} pour l'asset: ${asset.name}`);
        // Utiliser la premi√®re connexion disponible comme fallback
        const fallbackConnection = connectionCache.connections[0];
        
        // Continuer avec cette connexion
        const tagsForConnection = connectionCache.tagMap.get(fallbackConnection.connectionName);
        let tag = tagsForConnection?.get(tagName);
        
        // Si le tag exact n'existe pas, on essaie des alternatives
        if (!tag) {
          if (tagsForConnection && tagsForConnection.size > 0) {
            // Utiliser le premier tag disponible qui correspond au type demand√©
            let candidateTag = null;
            
            // Recherche d'un tag similaire
            if (tagName.includes('prod')) {
              // Convertir l'it√©rateur en tableau pour √©viter les probl√®mes de compilation
              const tagEntries = Array.from(tagsForConnection.entries());
              for (const [tagKey, tagValue] of tagEntries) {
                if (tagKey.includes('prod')) {
                  candidateTag = tagValue;
                  console.log(`üîÑ Tag alternatif 'prod' trouv√©: ${tagKey} pour la connexion ${fallbackConnection.connectionName}`);
                  break;
                }
              }
            } else if (tagName.includes('IPE')) {
              // Convertir l'it√©rateur en tableau pour √©viter les probl√®mes de compilation
              const tagEntries = Array.from(tagsForConnection.entries());
              for (const [tagKey, tagValue] of tagEntries) {
                if (tagKey.includes('IPE')) {
                  candidateTag = tagValue;
                  console.log(`üîÑ Tag alternatif 'IPE' trouv√©: ${tagKey} pour la connexion ${fallbackConnection.connectionName}`);
                  break;
                }
              }
            } else if (tagName.includes('conso')) {
              // Convertir l'it√©rateur en tableau pour √©viter les probl√®mes de compilation
              const tagEntries = Array.from(tagsForConnection.entries());
              for (const [tagKey, tagValue] of tagEntries) {
                if (tagKey.includes('conso')) {
                  candidateTag = tagValue;
                  console.log(`üîÑ Tag alternatif 'conso' trouv√©: ${tagKey} pour la connexion ${fallbackConnection.connectionName}`);
                  break;
                }
              }
            }
            
            if (candidateTag) {
              tag = candidateTag;
            } else {
              // Si aucun tag similaire, prendre le premier tag disponible
              const firstTag = Array.from(tagsForConnection.values())[0];
              console.log(`‚ö†Ô∏è Aucun tag similaire √† ${tagName} trouv√©. Utilisation du premier tag disponible: ${firstTag.name}`);
              tag = firstTag;
            }
          }
        }
        
        if (tag) {
          // Construire l'objet de variable avec le tag fallback
          return createVariableWithTag(assetId, name, fallbackConnection, tag, dataType, unit, description, createAggs);
        }
      }
      
      // Si nous arrivons ici, c'est qu'aucun fallback n'a fonctionn√©
      return null;
    }

    // R√©cup√©rer la map des tags pour cette connexion
    const tagsForConnection = connectionCache.tagMap.get(connection.connectionName);
    
    // Strat√©gies de recherche de tag (en utilisant le cache)
    let tag = null;
    
    // 1. Rechercher le tag exact
    tag = tagsForConnection?.get(tagName);
    
    // 2. Si pas trouv√© et que c'est un tag de production ou IPE, essayer les variantes
    if (!tag) {
      // Cr√©er des tableaux pour stocker toutes les variantes trouv√©es
      let foundTags: { name: string, tag: any }[] = [];
      
      if (tagName === 'prod' || tagName === 'prod_quantite') {
        const alternativeNames = ['prod', 'prod_quantite', 'prod_kg'];
        for (const altName of alternativeNames) {
          const altTag = tagsForConnection?.get(altName);
          if (altTag) {
            foundTags.push({ name: altName, tag: altTag });
          }
        }
      } else if (tagName === 'prod_kg') {
        const alternativeNames = ['prod_kg', 'prod', 'prod_quantite'];
        for (const altName of alternativeNames) {
          const altTag = tagsForConnection?.get(altName);
          if (altTag) {
            foundTags.push({ name: altName, tag: altTag });
          }
        }
      } else if (tagName === 'IPE' || tagName === 'IPE_quantite') {
        const alternativeNames = ['IPE', 'IPE_quantite', 'IPE_kg'];
        for (const altName of alternativeNames) {
          const altTag = tagsForConnection?.get(altName);
          if (altTag) {
            foundTags.push({ name: altName, tag: altTag });
          }
        }
      } else if (tagName === 'IPE_kg') {
        const alternativeNames = ['IPE_kg', 'IPE', 'IPE_quantite'];
        for (const altName of alternativeNames) {
          const altTag = tagsForConnection?.get(altName);
          if (altTag) {
            foundTags.push({ name: altName, tag: altTag });
          }
        }
      } else if (tagName === 'conso') {
        // Pour la consommation, chercher exactement 'conso'
        const altTag = tagsForConnection?.get('conso');
        if (altTag) {
          foundTags.push({ name: 'conso', tag: altTag });
        }
      } else if (tagName === 'etat') {
        // Pour l'√©tat capteur, chercher exactement 'etat'
        const altTag = tagsForConnection?.get('etat');
        if (altTag) {
          foundTags.push({ name: 'etat', tag: altTag });
        }
      }
      
      // Maintenant, choisir le tag le plus appropri√© en fonction de la variante demand√©e
      if (foundTags.length > 0) {
        // Utiliser le premier tag trouv√©
        tag = foundTags[0].tag;
        console.log(`üîç Tag alternatif trouv√©: ${foundTags[0].name} au lieu de ${tagName} pour la connexion ${connection.connectionName}`);
        
        // Si plusieurs tags trouv√©s, on log les alternatives pour debugging
        if (foundTags.length > 1) {
          console.log(`üí° Autres tags possibles pour ${tagName}: ${foundTags.slice(1).map(t => t.name).join(', ')}`);
        }
      }
    }
    
    if (!tag) {
      // Afficher les tags disponibles pour faciliter le d√©bogage
      const availableTags = Array.from(tagsForConnection?.keys() || []).join(', ');
      console.error(`‚ö†Ô∏è Tag ${tagName} non trouv√© pour la connexion ${connection.connectionName}. Tags disponibles: ${availableTags}`);
      
      // Tenter de trouver un tag de secours
      if (tagsForConnection && tagsForConnection.size > 0) {
        // Utiliser le premier tag disponible comme dernier recours
        const fallbackTag = Array.from(tagsForConnection.values())[0];
        console.log(`‚ö†Ô∏è Utilisation du tag de secours: ${fallbackTag.name} pour ${name}`);
        tag = fallbackTag;
      } else {
        // Vraiment aucun tag disponible
        return null;
      }
    }

    return createVariableWithTag(assetId, name, connection, tag, dataType, unit, description, createAggs);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la cr√©ation de la variable ${name} pour l'asset ${assetId}:`, 
      error instanceof Error ? error.message : error);
    
    // Mise √† jour des statistiques d'erreur
    const errorType = error instanceof Error ? error.name : 'UnknownError';
    importStats.errors.set(errorType, (importStats.errors.get(errorType) || 0) + 1);
    
    return null;
  }
}

// Nouvelle fonction pour extraire la logique de cr√©ation de variable avec un tag
async function createVariableWithTag(
  assetId: string, 
  name: string, 
  connection: any, 
  tag: any, 
  dataType: string, 
  unit: string | null, 
  description?: string, 
  createAggs: boolean = false
) {
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }
  
  // Construire l'objet de variable pour l'API
  const body = {
    variableName: name,
    assetId,
    dataType,
    description: description || `Variable ${name} cr√©√©e automatiquement`,
    unit,
    store: true,
    adapterId: '79894682fe424b409d954bd6cf0fda6b',
    topic: tag.topic,
    connected: false,
    sourceType: 'Tag',
    tag: {
      adapterId: '79894682fe424b409d954bd6cf0fda6b',
      connectionName: connection.connectionName,
      tagName: tag.name, // Utiliser le nom du tag trouv√©, qui peut √™tre diff√©rent de celui demand√©
      dataType: tag.dataType || dataType,
      topic: tag.topic,
      connected: false
    },
    retention: {
      settings: {
        timeSettings: {
          timeRange: {
            base: "year",
            factor: 6
          }
        }
      }
    }
  };

  logDebug(`Cr√©ation de la variable`, body);

  // Utiliser le contr√¥le de d√©bit pour la cr√©ation de la variable
  const createResponse = await executeWithRateLimit(
    `createVariable:${assetId}:${name}`,
    () => fetch('/api/variables', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'X-Auth-Config': JSON.stringify(authConfig)
      },
      body: JSON.stringify(body)
    })
  );

  if (!createResponse.ok) {
    const errorText = await createResponse.text();
    throw new Error(`Erreur lors de la cr√©ation de la variable: ${errorText}`);
  }

  const newVariable = await createResponse.json();
  console.log(`‚úÖ Variable cr√©√©e: ${name} pour l'asset: ${connection.connectionName} (tag: ${tag.name})`);

  // Mettre en cache la nouvelle variable
  const cacheKey = `${assetId}:${name.toLowerCase()}`;
  variableExistenceCache.set(cacheKey, newVariable);

  // Cr√©er les agr√©gations si demand√©
  if (createAggs) {
    // Utiliser le contr√¥le de d√©bit pour les agr√©gations aussi
    const aggregations = await executeWithRateLimit(
      `createAggregations:${newVariable.variableId}`,
      () => createAggregations(newVariable.variableId, name)
    );
    
    return {
      ...newVariable,
      aggregations
    };
  }

  return newVariable;
}

// Modification de createOrGetVariable pour inclure le m√©canisme de reprise
async function createOrGetVariable(assetId: string, name: string, dataType: string = 'DOUBLE', unit: string | null = null, description?: string, createAggs: boolean = false) {
  const cacheKey = `${assetId}:${name.toLowerCase()}`;
  
  // V√©rifier si on a d√©j√† trop tent√© pour cette variable
  if (failedVariableAttempts.has(cacheKey)) {
    const attempt = failedVariableAttempts.get(cacheKey)!;
    if (attempt.retryCount >= 3) {
      console.error(`üõë Abandon de la cr√©ation apr√®s 3 √©checs: ${name} (dernier √©chec: ${attempt.error})`);
      importStats.failedVariables++;
      return null;
    }
    
    // Attendre le d√©lai de backoff
    if (Date.now() < attempt.nextRetry) {
      const waitTime = attempt.nextRetry - Date.now();
      console.log(`‚è±Ô∏è Attente de ${waitTime}ms avant nouvelle tentative pour ${name}`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
    
    // Incr√©menter le compteur de variables r√©essay√©es
    importStats.retriedVariables++;
    console.log(`üîÑ Tentative #${attempt.retryCount + 1} pour ${name}`);
  }
  
  try {
    // V√©rifier si la variable existe d√©j√†
    const existingVariable = await getExistingVariable(assetId, name);
    if (existingVariable) {
      return {
        ...existingVariable,
        aggregations: createAggs ? await createAggregations(existingVariable.variableId, name) : undefined
      };
    }

    // D√©terminer le type de tag en fonction du nom de la variable
    let tagName = '';
    let tagVariant = ''; // Indique une pr√©f√©rence de variante (quantite vs kg)
    
    if (name.startsWith('Consommation_')) {
      tagName = 'conso';
    } else if (name.startsWith('Production_')) {
      // D√©tecter si on veut prod_quantite ou prod_kg en fonction du libell√©
      if (name.toLowerCase().includes('kg') || name.toLowerCase().includes('kilo')) {
        tagName = 'prod_kg';
        tagVariant = 'kg';
      } else {
        tagName = 'prod_quantite';
        tagVariant = 'quantite';
      }
    } else if (name.startsWith('IPE_')) {
      // D√©tecter si on veut IPE_quantite ou IPE_kg
      if (name.toLowerCase().includes('kg') || name.toLowerCase().includes('kilo')) {
        tagName = 'IPE_kg';
        tagVariant = 'kg';
      } else {
        tagName = 'IPE_quantite';
        tagVariant = 'quantite';
      }
    } else if (name.startsWith('EtatCapteur_')) {
      tagName = 'etat';
    }

    console.log(`üîç Variable ${name} - Tag s√©lectionn√©: ${tagName} (variante: ${tagVariant || 'standard'})`);

    // Utiliser createOrGetTagVariable pour cr√©er la variable
    const result = await executeWithRateLimit(
      `createVariable:${cacheKey}`,
      () => createOrGetTagVariable(assetId, name, tagName, dataType, unit, description, createAggs)
    );
    
    if (result) {
      // Succ√®s - supprimer toute trace d'√©chec pr√©c√©dent
      failedVariableAttempts.delete(cacheKey);
      importStats.successfulVariables++;
    }
    
    return result;
  } catch (error) {
    // G√©rer l'√©chec avec backoff exponentiel
    const attempt = failedVariableAttempts.get(cacheKey) || { retryCount: 0, nextRetry: 0, error: null };
    attempt.retryCount++;
    attempt.error = error;
    
    // Calculer le d√©lai de backoff (500ms, 2s, 8s)
    const backoffTime = Math.pow(4, attempt.retryCount) * 125;
    attempt.nextRetry = Date.now() + backoffTime;
    
    failedVariableAttempts.set(cacheKey, attempt);
    console.warn(`‚ö†Ô∏è √âchec de cr√©ation pour ${name}, nouvelle tentative #${attempt.retryCount} dans ${backoffTime}ms`);
    
    // Si moins de 3 √©checs, on r√©essaye imm√©diatement
    if (attempt.retryCount < 3) {
      console.log(`üîÅ R√©essai imm√©diat pour ${name} (tentative #${attempt.retryCount})`);
      return createOrGetVariable(assetId, name, dataType, unit, description, createAggs);
    }
    
    return null;
  }
}

async function getRootAsset() {
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

  const response = await fetch('/api/assets/root', {
    headers: {
      'X-Auth-Config': JSON.stringify(authConfig)
    }
  });

  if (!response.ok) {
    throw new Error('Impossible de r√©cup√©rer l\'asset racine');
  }

  const rootAsset = await response.json();
  return rootAsset;
}

export async function importFlexibleAssetsToIIH(data: FlexibleProcessedData) {
  // Pr√©-charger les connexions et tags
  await preloadConnectionsAndTags();

  const { hierarchyData } = data;
  const createdAssets = new Map<string, any>();
  // Stocker les r√©f√©rences aux n≈ìuds pour la deuxi√®me passe
  const nodeMap = new Map<string, { node: HierarchyNode, asset: any, level: number, isOneBeforeLastLevel: boolean }>();

  // R√©cup√©rer l'asset racine
  const rootAsset = await getRootAsset();
  console.log('Import vers IIH d√©marr√©...');

  // D√©terminer le nombre total de niveaux dans la hi√©rarchie
  const totalLevels = hierarchyData.levels.length;
  console.log(`Hi√©rarchie avec ${totalLevels} niveaux d√©tect√©e.`);

  // PREMI√àRE PASSE: Cr√©er tous les assets et leurs variables de base
  // Fonction r√©cursive pour cr√©er les assets
  async function createAssetsRecursively(node: HierarchyNode, parentId: string) {
    try {
      // Cr√©er l'asset actuel
      const asset = await createOrGetAsset({
        name: node.name,
        parentId,
        type: 'asset',
        metadata: {
          level: node.levelName
        }
      });

      if (!asset) {
        console.error(`‚ùå √âchec de cr√©ation de l'asset: ${node.name}`);
        return null;
      }

      createdAssets.set(node.id, asset);
      importStats.totalAssets++;

      // Identifier le niveau de l'asset dans la hi√©rarchie
      const currentLevelIndex = hierarchyData.levels.findIndex(level => level.level === node.level);
      
      // Calculer la position exacte dans la hi√©rarchie (1-indexed)
      const levelPosition = currentLevelIndex + 1;
      
      // D√©terminer les types de niveaux
      const isFirstLevel = levelPosition === 1;
      const isLastLevel = levelPosition === totalLevels;
      const isOneBeforeLastLevel = levelPosition === totalLevels - 1;
      const isIntermediateLevel = !isFirstLevel && !isLastLevel && !isOneBeforeLastLevel;
      
      console.log(`Asset: ${node.name} - Niveau ${levelPosition}/${totalLevels} (${isFirstLevel ? 'Premier' : isLastLevel ? 'Dernier' : isOneBeforeLastLevel ? 'Avant-dernier' : 'Interm√©diaire'})`);
      
      // Enregistrer les informations du n≈ìud pour la deuxi√®me passe
      nodeMap.set(node.id, {
        node,
        asset,
        level: levelPosition,
        isOneBeforeLastLevel
      });
      
      // Trouver les enfants pour d√©terminer si c'est un n≈ìud terminal
      const childLinks = hierarchyData.links.filter(link => link.source === node.id);
      const childNodes = childLinks.map(link => 
        hierarchyData.nodes.find(n => n.id === link.target)
      ).filter(n => n !== undefined) as HierarchyNode[];

      // Variables pour stocker tous les attributs
      let prodVar: any = null;
      let prodKgVar: any = null;
      let ipeVar: any = null;
      let ipeKgVar: any = null;
      let stateVar: any = null;
      // Variables de consommation
      let consoVar: any = null;

      // Ajouter des attributs pour tous les niveaux sauf le premier
      if (!isFirstLevel) {
        // D√©terminer le type d'√©nergie √† partir des m√©tadonn√©es ou du nom
        let energyType = node.metadata?.energyType || 'Unknown';
        if (energyType === 'Unknown') {
          // Fallback sur la d√©tection par le nom si pas de type sp√©cifi√©
          const name = node.name.toLowerCase();
          if (name.includes('elec') || name.includes('√©lectric')) energyType = 'Elec';
          else if (name.includes('gaz')) energyType = 'Gaz';
          else if (name.includes('eau')) energyType = 'Eau';
          else if (name.includes('air') || name.includes('comprim')) energyType = 'Air';
        }

        try {
          // Cr√©er les variables - Utiliser des promises ind√©pendantes pour chaque variable
          // mais les traiter une par une pour √©viter les probl√®mes de verrou de base de donn√©es
          
          // Variable de consommation - seulement pour le dernier niveau
          if (isLastLevel) {
            // Revenir √† l'ancienne version avec une seule variable de consommation bas√©e sur le type d'√©nergie d√©tect√©
            const consoVarName = `Consommation_${energyType}_${sanitizeAssetName(node.name)}`;
            consoVar = await createOrGetVariable(
              asset.assetId,
              consoVarName,
              'FLOAT32',
              getUnitForEnergyType(energyType),
              `Consommation √©nerg√©tique (${energyType})`,
              true
            );
            
            // Pause pour r√©duire la contention
            await new Promise(resolve => setTimeout(resolve, 100));
          }

          // Variables de production pour tous les niveaux sauf le premier
          const prodVarName = `Production_${sanitizeAssetName(node.name)}`;
          prodVar = await createOrGetVariable(
            asset.assetId,
            prodVarName,
            'FLOAT32',
            'pcs',
            'Production (quantit√©)',
            true
          );

          // Attendre un peu entre les cr√©ations pour r√©duire la contention
          await new Promise(resolve => setTimeout(resolve, 100));

          const prodKgVarName = `Production_kg_${sanitizeAssetName(node.name)}`;
          prodKgVar = await createOrGetVariable(
            asset.assetId,
            prodKgVarName,
            'FLOAT32',
            'kg',
            'Production (kg)',
            true
          );

          // Attendre un peu entre les cr√©ations pour r√©duire la contention
          await new Promise(resolve => setTimeout(resolve, 100));

          // Variables IPE pour tous les niveaux sauf le premier
          const ipeVarName = `IPE_${sanitizeAssetName(node.name)}`;
          ipeVar = await createOrGetVariable(
            asset.assetId,
            ipeVarName,
            'FLOAT32',
            'kWh/pcs',
            'Indicateur de Performance √ânerg√©tique (kWh/pcs)',
            true
          );

          // Attendre un peu entre les cr√©ations pour r√©duire la contention
          await new Promise(resolve => setTimeout(resolve, 100));
          
          const ipeKgVarName = `IPE_kg_${sanitizeAssetName(node.name)}`;
          ipeKgVar = await createOrGetVariable(
            asset.assetId,
            ipeKgVarName,
            'FLOAT32',
            'kWh/kg',
            'Indicateur de Performance √ânerg√©tique (kWh/kg)',
            true
          );

          // √âtat capteur uniquement pour le dernier niveau
          if (isLastLevel) {
            // Attendre un peu entre les cr√©ations pour r√©duire la contention
            await new Promise(resolve => setTimeout(resolve, 100));
            
            const stateVarName = `EtatCapteur_${sanitizeAssetName(node.name)}`;
            stateVar = await createOrGetVariable(
              asset.assetId,
              stateVarName,
              'STRING',
              null,
              '√âtat du capteur de la machine'
            );
          }

          // Log des statistiques p√©riodiquement
          if (importStats.successfulVariables % 10 === 0 || importStats.failedVariables % 5 === 0) {
            console.log(`üìä Statistiques d'importation:
              - Assets cr√©√©s: ${importStats.totalAssets}
              - Variables cr√©√©es: ${importStats.successfulVariables}
              - Variables en √©chec: ${importStats.failedVariables}
              - Variables r√©essay√©es: ${importStats.retriedVariables}
              - Agr√©gations en attente: ${aggregationQueue.length}
              - Erreurs fr√©quentes: ${Array.from(importStats.errors.entries()).map(([type, count]) => `${type}: ${count}`).join(', ')}
            `);
          }

          // Mettre √† jour les m√©tadonn√©es du n≈ìud avec les IDs des variables
          node.metadata = {
            ...node.metadata,
            energyType,
            assetId: asset.assetId,
            type: isLastLevel ? 'machine' : 'group',
            levelPosition, // Stocker la position du niveau
            totalLevels,   // Stocker le nombre total de niveaux
            variable: consoVar ? {
              id: consoVar.variableId,
              name: consoVar.variableName,
              energyType: energyType,
              aggregations: consoVar.aggregations ? Object.entries(consoVar.aggregations).reduce<{ [key: string]: Aggregation }>((acc, [key, agg]: [string, any]) => ({
                ...acc,
                [key]: {
                  id: agg.id,
                  type: agg.type,
                  cycle: {
                    base: agg.cycle.base,
                    factor: agg.cycle.factor
                  }
                }
              }), {}) : undefined
            } : undefined,
            productionVariable: prodVar ? {
              id: prodVar.variableId,
              name: prodVar.variableName,
              aggregations: prodVar.aggregations ? Object.entries(prodVar.aggregations).reduce<{ [key: string]: Aggregation }>((acc, [key, agg]: [string, any]) => ({
                ...acc,
                [key]: {
                  id: agg.id,
                  type: agg.type,
                  cycle: {
                    base: agg.cycle.base,
                    factor: agg.cycle.factor
                  }
                }
              }), {}) : undefined
            } : undefined,
            productionKgVariable: prodKgVar ? {
              id: prodKgVar.variableId,
              name: prodKgVar.variableName,
              aggregations: prodKgVar.aggregations ? Object.entries(prodKgVar.aggregations).reduce<{ [key: string]: Aggregation }>((acc, [key, agg]: [string, any]) => ({
                ...acc,
                [key]: {
                  id: agg.id,
                  type: agg.type,
                  cycle: {
                    base: agg.cycle.base,
                    factor: agg.cycle.factor
                  }
                }
              }), {}) : undefined
            } : undefined,
            ipeVariable: ipeVar ? {
              id: ipeVar.variableId,
              name: ipeVar.variableName,
              aggregations: ipeVar.aggregations ? Object.entries(ipeVar.aggregations).reduce<{ [key: string]: Aggregation }>((acc, [key, agg]: [string, any]) => ({
                ...acc,
                [key]: {
                  id: agg.id,
                  type: agg.type,
                  cycle: {
                    base: agg.cycle.base,
                    factor: agg.cycle.factor
                  }
                }
              }), {}) : undefined
            } : undefined,
            ipeKgVariable: ipeKgVar ? {
              id: ipeKgVar.variableId,
              name: ipeKgVar.variableName,
              aggregations: ipeKgVar.aggregations ? Object.entries(ipeKgVar.aggregations).reduce<{ [key: string]: Aggregation }>((acc, [key, agg]: [string, any]) => ({
                ...acc,
                [key]: {
                  id: agg.id,
                  type: agg.type,
                  cycle: {
                    base: agg.cycle.base,
                    factor: agg.cycle.factor
                  }
                }
              }), {}) : undefined
            } : undefined,
            stateVariable: stateVar ? {
              id: stateVar.variableId,
              name: stateVar.variableName
            } : undefined
          };
        } catch (error) {
          console.error(`‚ùå Erreur cr√©ation variables pour asset ${node.name}:`, error instanceof Error ? error.message : error);
        }
      }

      // Traiter les enfants de mani√®re r√©cursive
      // Pour tous les niveaux, traiter s√©quentiellement pour √©viter
      // de surcharger l'API avec trop de requ√™tes simultan√©es
      for (const childNode of childNodes) {
        await createAssetsRecursively(childNode, asset.assetId);
      }

      return asset;
    } catch (error) {
      console.error(`‚ùå Erreur traitement n≈ìud ${node.name}:`, error instanceof Error ? error.message : error);
      return null;
    }
  }

  // Commencer par les n≈ìuds de premier niveau
  const topLevelNodes = hierarchyData.nodes.filter(
    node => node.level === hierarchyData.levels[0].level
  );

  // Pour le premier niveau, on peut traiter les branches principales en parall√®le
  await Promise.all(
    topLevelNodes.map(node => createAssetsRecursively(node, rootAsset.assetId))
  );

  console.log(`Premi√®re passe termin√©e: cr√©ation des assets et variables de base. ${createdAssets.size} assets cr√©√©s.`);
  
  // DEUXIEME PASSE: Cr√©er les variables d'agr√©gation qui d√©pendent d'autres variables
  console.log(`D√©marrage de la seconde passe: cr√©ation des r√®gles d'agr√©gation...`);
  
  // R√©cup√©rer tous les n≈ìuds de l'avant-dernier niveau
  const beforeLastLevelNodes = Array.from(nodeMap.entries())
    .filter(([_, nodeInfo]) => nodeInfo.isOneBeforeLastLevel)
    .map(([nodeId, nodeInfo]) => ({ nodeId, ...nodeInfo }));
  
  // Traiter par lots pour ne pas surcharger l'API
  const RULE_BATCH_SIZE = 5;
  for (let i = 0; i < beforeLastLevelNodes.length; i += RULE_BATCH_SIZE) {
    const batch = beforeLastLevelNodes.slice(i, i + RULE_BATCH_SIZE);
    await Promise.all(batch.map(async ({ nodeId, node, asset }) => {
      try {
        console.log(`üìä Cr√©ation des r√®gles d'agr√©gation pour le niveau avant-dernier: ${node.name}`);
        
        // Trouver les enfants
        const childLinks = hierarchyData.links.filter(link => link.source === nodeId);
        const childNodeIds = childLinks.map(link => link.target);
        
        // Pour chaque type d'√©nergie, cr√©er une variable d√©di√©e
        const energyTypes = ['Elec', 'Gaz', 'Eau', 'Air'];
        
        // R√©cup√©rer les variables de consommation par type d'√©nergie
        for (const energyType of energyTypes) {
          const consoVarName = `Consommation_${energyType}_${sanitizeAssetName(node.name)}`;
          console.log(`üìä Cr√©ation de la r√®gle de consommation pour ${energyType}: ${consoVarName}`);
          
          // R√©cup√©rer les variables enfants de ce type d'√©nergie
          const childConsumptionVariables = [];
          
          // R√©cup√©rer les informations des variables enfants en parall√®le
          const childVariablePromises = childNodeIds.map(async childId => {
            const childNodeInfo = nodeMap.get(childId);
            if (childNodeInfo) {
              const childNode = childNodeInfo.node;
              const childAsset = childNodeInfo.asset;
              
              // Chercher la variable de consommation de cet enfant pour ce type d'√©nergie
              const childVarName = `Consommation_${energyType}_${sanitizeAssetName(childNode.name)}`;
              const childVars = await getExistingVariable(childAsset.assetId, childVarName);
              
              if (childVars) {
                console.log(`üìä Trouv√© variable de consommation ${energyType} pour l'enfant ${childNode.name}: ${childVars.variableName}`);
                return {
                  name: `var${childConsumptionVariables.length + 1}`,
                  variableId: childVars.variableId,
                  variableName: childVars.variableName
                };
              } else {
                console.log(`‚ö†Ô∏è Variable de consommation ${energyType} non trouv√©e pour l'enfant ${childNode.name}`);
                return null;
              }
            }
            return null;
          });
          
          // Attendre que toutes les recherches de variables soient termin√©es
          const childVarsResults = await Promise.all(childVariablePromises);
          
          // Filtrer les r√©sultats null
          childConsumptionVariables.push(...childVarsResults.filter(v => v !== null));
          
          // Que faire si aucune variable de consommation enfant n'est trouv√©e?
          let consoVar;
          if (childConsumptionVariables.length > 0) {
            // Cr√©er une formule qui somme toutes les variables (var1 + var2 + var3 + ...)
            const formula = childConsumptionVariables.map((v, i) => `var${i + 1}`).join(' + ');
            
            console.log(`üìä Cr√©ation de la r√®gle d'agr√©gation ${energyType} avec la formule: ${formula} (${childConsumptionVariables.length} variables)`);
            
            // Cr√©er la variable de consommation agr√©g√©e pour ce niveau et ce type d'√©nergie
            consoVar = await createOrGetAggregatedVariable(
              asset.assetId,
              consoVarName,
              formula,
              childConsumptionVariables.map((v, i) => ({
                name: `var${i + 1}`,
                variableId: v.variableId,
                variableName: v.variableName
              })),
              'FLOAT32',
              getUnitForEnergyType(energyType),
              `Consommation √©nerg√©tique (${energyType}) agr√©g√©e des sous-niveaux (${childConsumptionVariables.length} variables)`,
              true
            );
          } else {
            console.log(`‚ö†Ô∏è Aucune variable de consommation ${energyType} n'a √©t√© trouv√©e pour les enfants de ${node.name}.`);
            
            // Cr√©er une r√®gle vide (0 + 0) pour respecter le sourceType = "Rule"
            console.log(`üìä Cr√©ation d'une r√®gle avec valeur constante pour: ${consoVarName}`);
            
            // Cr√©er une r√®gle avec constante
            consoVar = await createRuleWithConstant(
              asset.assetId,
              consoVarName,
              'FLOAT32', 
              getUnitForEnergyType(energyType),
              `Consommation √©nerg√©tique (${energyType}) du niveau ${node.name} (pas d'enfants avec des variables de consommation)`,
              true
            );
          }
          
          // Mettre √† jour les m√©tadonn√©es avec cette nouvelle variable
          if (consoVar) {
            const metadataKey = `variable_${energyType.toLowerCase()}`;
            if (!node.metadata) {
              node.metadata = {};
            }
            
            node.metadata[metadataKey] = {
              id: consoVar.variableId,
              name: consoVar.variableName,
              energyType: energyType,
              aggregations: consoVar.aggregations ? Object.entries(consoVar.aggregations).reduce<{ [key: string]: Aggregation }>((acc, [key, agg]: [string, any]) => ({
                ...acc,
                [key]: {
                  id: agg.id,
                  type: agg.type,
                  cycle: {
                    base: agg.cycle.base,
                    factor: agg.cycle.factor
                  }
                }
              }), {}) : undefined
            };
          }
          
          // Petite pause entre les types d'√©nergie pour ne pas surcharger l'API
          await new Promise(resolve => setTimeout(resolve, 250));
        }
      } catch (error) {
        console.error(`‚ùå Erreur cr√©ation r√®gles d'agr√©gation pour ${node.name}:`, error instanceof Error ? error.message : error);
      }
    }));
    
    // Petite pause entre les lots pour ne pas surcharger l'API
    if (i + RULE_BATCH_SIZE < beforeLastLevelNodes.length) {
      console.log(`Pause de 1 seconde entre les lots...`);
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  // Apr√®s la cr√©ation de tous les assets et variables, traiter toutes les agr√©gations en attente
  console.log(`‚è≥ Traitement final des agr√©gations en attente (${aggregationQueue.length})...`);
  await processAggregationQueue();
  
  console.log(`‚úÖ Import termin√© avec succ√®s. ${createdAssets.size} assets cr√©√©s.`);
  return {
    success: true,
    message: `Import termin√© avec succ√®s. ${createdAssets.size} assets cr√©√©s. Les r√®gles d'agr√©gation ont √©t√© configur√©es.`,
    assets: Array.from(createdAssets.values())
  };
}

// Fonction pour obtenir l'unit√© en fonction du type d'√©nergie
function getUnitForEnergyType(energyType: string): string {
  switch (energyType.toLowerCase()) {
    case 'elec':
    case 'gaz':
      return 'kWh';
    case 'eau':
      return 'm3';
    case 'air':
      return 'm3';
    default:
      return 'kWh';
  }
}

// Fonction pour normaliser le type d'√©nergie
function normalizeEnergyType(energyType: string): string {
  const normalized = energyType.toLowerCase().trim();
  
  if (normalized.includes('elec') || normalized.includes('√©lectric')) return 'Elec';
  if (normalized.includes('gaz')) return 'Gaz';
  if (normalized.includes('eau')) return 'Eau';
  if (normalized.includes('air') || normalized.includes('comprim')) return 'Air';
  
  return 'Unknown';
}

/**
 * Cr√©e une variable qui agr√®ge d'autres variables existantes (via une formule)
 */
async function createOrGetAggregatedVariable(
  assetId: string, 
  name: string, 
  formula: string, 
  variables: { name: string, variableId: string, variableName: string }[],
  dataType: string = 'FLOAT32', 
  unit: string | null = null, 
  description?: string,
  createAggs: boolean = false
) {
  // V√©rifier si la variable existe d√©j√†
  const existingVariable = await getExistingVariable(assetId, name);
  if (existingVariable) {
    return {
      ...existingVariable,
      aggregations: createAggs ? await createAggregations(existingVariable.variableId, name) : undefined
    };
  }

  // Cr√©er une nouvelle variable avec la r√®gle (formule)
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

  // Construire les tags pour la r√®gle bas√©s sur les variables existantes
  const tags = variables.map(v => ({
    name: v.name,
    variableId: v.variableId,
    variableName: v.variableName,
    dataType: dataType
  }));

  // Construire l'objet de variable pour l'API
  const body = {
    variableName: name,
    assetId,
    dataType,
    description: description || `Variable ${name} cr√©√©e automatiquement (agr√©gation)`,
    unit,
    store: true,
    sourceType: 'Rule',
    rule: {
      formula,
      tags: tags
    },
    connected: false,
    retention: {
      settings: {
        timeSettings: {
          timeRange: {
            base: "year",
            factor: 6
          }
        }
      }
    }
  };

  logDebug(`Cr√©ation variable Rule d'agr√©gation`, body);

  const createResponse = await fetch('/api/variables', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Auth-Config': JSON.stringify(authConfig)
    },
    body: JSON.stringify(body)
  });

  if (!createResponse.ok) {
    const errorText = await createResponse.text();
    throw new Error(`Erreur cr√©ation variable Rule d'agr√©gation: ${errorText}`);
  }

  const newVariable = await createResponse.json();
  console.log(`‚úÖ Variable Rule d'agr√©gation cr√©√©e: ${name}`);

  // Mettre en cache la nouvelle variable
  const cacheKey = `${assetId}:${name.toLowerCase()}`;
  variableExistenceCache.set(cacheKey, newVariable);

  // Cr√©er les agr√©gations
  const aggregations = await createAggregations(newVariable.variableId, name);
  return {
    ...newVariable,
    aggregations
  };
}

// Nouvelle fonction pour cr√©er une variable de type r√®gle avec constante
async function createRuleWithConstant(
  assetId: string, 
  name: string,
  dataType: string = 'FLOAT32', 
  unit: string | null = null, 
  description?: string,
  createAggs: boolean = false
) {
  // V√©rifier si la variable existe d√©j√†
  const existingVariable = await getExistingVariable(assetId, name);
  if (existingVariable) {
    return {
      ...existingVariable,
      aggregations: createAggs ? await createAggregations(existingVariable.variableId, name) : undefined
    };
  }

  // On va cr√©er une variable de type Rule avec une formule constante
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

  // Construire l'objet de variable pour l'API
  const body = {
    variableName: name,
    assetId,
    dataType,
    description: description || `Variable ${name} cr√©√©e automatiquement (formule constante)`,
    unit,
    store: true,
    sourceType: 'Rule',
    rule: {
      formula: "0", // Valeur constante z√©ro
      constants: [
        {
          name: "c1",
          value: 0
        }
      ]
    },
    connected: false
  };

  logDebug(`Cr√©ation variable Rule constante`, body);

  const createResponse = await fetch('/api/variables', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Auth-Config': JSON.stringify(authConfig)
    },
    body: JSON.stringify(body)
  });

  if (!createResponse.ok) {
    const errorText = await createResponse.text();
    throw new Error(`Erreur cr√©ation variable Rule constante: ${errorText}`);
  }

  const newVariable = await createResponse.json();
  console.log(`‚úÖ Variable Rule constante cr√©√©e: ${name}`);

  // Mettre en cache la nouvelle variable
  const cacheKey = `${assetId}:${name.toLowerCase()}`;
  variableExistenceCache.set(cacheKey, newVariable);

  // Cr√©er les agr√©gations si demand√©
  if (createAggs) {
    const aggregations = await createAggregations(newVariable.variableId, name);
    return {
      ...newVariable,
      aggregations
    };
  }

  return newVariable;
}

// Ajouter une fonction pour v√©rifier p√©riodiquement l'√©tat de l'importation
async function checkImportStatus(createdAssets: Map<string, any>) {
  // Compteurs pour les statistiques
  let stats = {
    totalAssets: createdAssets.size,
    totalVariables: 0,
    totalAggregations: 0,
    pendingAggregations: aggregationQueue.length,
    failedVariables: 0
  };

  console.log(`\nüìä Statistiques d'importation :`);
  console.log(`- Assets cr√©√©s : ${stats.totalAssets}`);
  console.log(`- Agr√©gations en attente : ${stats.pendingAggregations}`);
  
  return stats;
}

// Corriger les erreurs de type en ajoutant une v√©rification pour les propri√©t√©s possiblement nulles
function buildMetadataWithVariable(variable: any, propName: string) {
  if (!variable) return undefined;
  
  return {
    id: variable.variableId,
    name: variable.variableName,
    aggregations: variable.aggregations ? Object.entries(variable.aggregations).reduce<{ [key: string]: Aggregation }>((acc, [key, agg]: [string, any]) => ({
      ...acc,
      [key]: {
        id: agg.id,
        type: agg.type,
        cycle: {
          base: agg.cycle.base,
          factor: agg.cycle.factor
        }
      }
    }), {}) : undefined
  };
}

// Sauvegarder l'√©tat de l'importation pour reprendre en cas d'erreur
function saveImportState(createdAssets: Map<string, any>, nodeMap: Map<string, any>) {
  const state = {
    assets: Array.from(createdAssets.entries()),
    nodes: Array.from(nodeMap.entries()),
    aggregationQueue: [...aggregationQueue]
  };
  
  try {
    localStorage.setItem('import_state', JSON.stringify(state));
    console.log('√âtat d\'importation sauvegard√© localement');
  } catch (error) {
    console.error('Erreur lors de la sauvegarde de l\'√©tat:', error);
  }
}

// R√©cup√©rer l'√©tat d'importation pr√©c√©dent si disponible
function loadImportState(): { assets: Map<string, any>, nodes: Map<string, any>, queue: AggregationRequest[] } | null {
  try {
    const stateJson = localStorage.getItem('import_state');
    if (!stateJson) return null;
    
    const state = JSON.parse(stateJson);
    return {
      assets: new Map(state.assets),
      nodes: new Map(state.nodes),
      queue: state.aggregationQueue
    };
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'√©tat:', error);
    return null;
  }
}

// Modifier createRuleVariable pour utiliser le cache
async function createRuleVariable(assetId: string, name: string, formula: string, tags: {
  name: string;
  adapterId: string;
  connectionName: string;
  tagName: string;
  dataType: string;
}[], dataType: string = 'Float', unit: string | null = null, description?: string) {
  // V√©rifier si la variable existe d√©j√† (utilise d√©j√† le cache via getExistingVariable)
  const existingVariable = await getExistingVariable(assetId, name);
  if (existingVariable) {
    return existingVariable;
  }

  // R√©cup√©rer les informations de l'asset
  const asset = await getAssetDetails(assetId);
  
  const authConfig = getAuthConfig();
  if (!authConfig) {
    throw new Error('Non authentifi√©');
  }

  // S'assurer que les connexions sont pr√©charg√©es
  if (!connectionCache.loaded) {
    await preloadConnectionsAndTags();
  }

  // V√©rifier et corriger les tags si n√©cessaire (en utilisant le cache)
  const validatedTags = [];
  
  for (const tag of tags) {
    // Trouver la connexion correspondante
    const connection = connectionCache.connectionMap.get(tag.connectionName);
    
    if (!connection) {
      console.error(`‚ö†Ô∏è Connexion ${tag.connectionName} non trouv√©e pour la variable Rule ${name}`);
      continue;
    }
    
    // R√©cup√©rer la map des tags pour cette connexion
    const tagsForConnection = connectionCache.tagMap.get(tag.connectionName);
    
    // V√©rifier si le tag demand√© existe
    let foundTag = tagsForConnection?.get(tag.tagName);
    
    if (!foundTag) {
      // Si le tag n'existe pas, essayer de trouver des alternatives
      const alternativeTags = [];
      
      if (tag.tagName === 'prod' || tag.tagName === 'prod_quantite') {
        alternativeTags.push('prod_quantite', 'prod_kg', 'prod');
      } else if (tag.tagName === 'prod_kg') {
        alternativeTags.push('prod_kg', 'prod_quantite', 'prod');
      } else if (tag.tagName === 'IPE' || tag.tagName === 'IPE_quantite') {
        alternativeTags.push('IPE_quantite', 'IPE_kg', 'IPE');
      } else if (tag.tagName === 'IPE_kg') {
        alternativeTags.push('IPE_kg', 'IPE', 'IPE_quantite');
      } else if (tag.tagName === 'conso') {
        alternativeTags.push('conso');
      }
      
      for (const altTag of alternativeTags) {
        const alt = tagsForConnection?.get(altTag);
        if (alt) {
          foundTag = alt;
          console.log(`üîÑ Tag alternatif trouv√©: ${altTag} au lieu de ${tag.tagName} pour la connexion ${tag.connectionName}`);
          break;
        }
      }
    }
    
    if (foundTag) {
      // Ajouter le tag valid√©
      validatedTags.push({
        ...tag,
        tagName: foundTag.name,
        dataType: foundTag.dataType || tag.dataType,
        topic: foundTag.topic
      });
    } else {
      console.error(`‚ö†Ô∏è Tag ${tag.tagName} non trouv√© pour la connexion ${tag.connectionName}`);
    }
  }
  
  // Si on n'a pas assez de tags valid√©s, on ne peut pas cr√©er la variable Rule
  if (validatedTags.length < 2) {
    throw new Error(`Impossible de cr√©er la variable Rule ${name}: pas assez de tags valides (${validatedTags.length}/2)`);
  }

  // Construire l'objet de variable pour l'API
  const body = {
    variableName: name,
    assetId,
    dataType,
    description: description || `Variable ${name} cr√©√©e automatiquement`,
    unit,
    store: true,
    sourceType: 'Rule',
    rule: {
      formula,
      tags: validatedTags
    },
    connected: false
  };

  logDebug(`Cr√©ation variable Rule`, body);

  const createResponse = await fetch('/api/variables', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Auth-Config': JSON.stringify(authConfig)
    },
    body: JSON.stringify(body)
  });

  if (!createResponse.ok) {
    const errorText = await createResponse.text();
    throw new Error(`Erreur cr√©ation variable Rule: ${errorText}`);
  }

  const newVariable = await createResponse.json();
  console.log(`‚úÖ Variable Rule cr√©√©e: ${name}`);

  // Mettre en cache la nouvelle variable
  const cacheKey = `${assetId}:${name.toLowerCase()}`;
  variableExistenceCache.set(cacheKey, newVariable);

  // Cr√©er les agr√©gations
  const aggregations = await createAggregations(newVariable.variableId, name);
  return {
    ...newVariable,
    aggregations
  };
}